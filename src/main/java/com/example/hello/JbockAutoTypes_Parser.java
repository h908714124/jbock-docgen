package com.example.hello;

import java.io.File;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.lang.AssertionError;
import java.lang.IllegalArgumentException;
import java.lang.IllegalStateException;
import java.lang.Override;
import java.lang.RuntimeException;
import java.lang.String;
import java.lang.System;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.net.URI;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.EnumMap;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import java.util.OptionalInt;
import java.util.ResourceBundle;
import java.util.StringJoiner;
import java.util.function.Function;
import java.util.function.Supplier;
import java.util.regex.Pattern;
import java.util.stream.Stream;

/**
 * Generated by
 * <a href="https://github.com/h908714124/jbock">jbock 2.9.1</a>
 */
final class JbockAutoTypes_Parser {
  private PrintStream out;

  private PrintStream err;

  private int indent = 4;

  private int errorExitCode = 1;

  private Map<String, String> messages;

  private JbockAutoTypes_Parser() {
  }

  static JbockAutoTypes_Parser create() {
    return new JbockAutoTypes_Parser();
  }

  ParseResult parse(String[] args) {
    IndentPrinter outStream = new IndentPrinter(out == null ? System.out : out, indent);
    IndentPrinter errStream = new IndentPrinter(err == null ? System.out : err, indent);
    Messages msg = new Messages(messages == null ? Collections.emptyMap() : messages);
    Tokenizer tokenizer = new Tokenizer(outStream, errStream, msg);
    return tokenizer.parse(args);
  }

  JbockAutoTypes parseOrExit(String[] args) {
    ParseResult result = parse(args);
    if (result instanceof ParsingSuccess) {
      return ((ParsingSuccess) result).result();
    }
    if (result instanceof HelpPrinted) {
      System.exit(0);
    }
    if (result instanceof ParsingFailed) {
      System.exit(errorExitCode);
    }
    // all cases handled
    throw new AssertionError("never thrown");
  }

  JbockAutoTypes_Parser withErrorStream(PrintStream err) {
    this.err = Objects.requireNonNull(err);
    return this;
  }

  JbockAutoTypes_Parser withIndent(int indent) {
    this.indent = indent;
    return this;
  }

  JbockAutoTypes_Parser withErrorExitCode(int errorExitCode) {
    this.errorExitCode = errorExitCode;
    return this;
  }

  JbockAutoTypes_Parser withMessages(Map<String, String> map) {
    this.messages = Objects.requireNonNull(map);
    return this;
  }

  JbockAutoTypes_Parser withResourceBundle(ResourceBundle bundle) {
    Map<String, String> map = new HashMap<>();
    for (String name : Collections.list(bundle.getKeys())) {
      map.put(name, bundle.getString(name));
    }
    return withMessages(map);
  }

  private static String readValidArgument(String token, Iterator<String> it) {
    if (token.length() < 2) {
      throw new IllegalArgumentException();
    }
    boolean isLong = token.charAt(1) == '-';
    int index = token.indexOf('=');
    if (isLong && index >= 0) {
      return token.substring(index + 1);
    }
    if (!isLong && token.length() >= 3) {
      return token.substring(2);
    }
    return readNext(token, it);
  }

  private static String readNext(String token, Iterator<String> it) {
    if (!it.hasNext()) {
      throw new IllegalArgumentException("Missing value after token: " + token);
    }
    return it.next();
  }

  JbockAutoTypes_Parser withOutputStream(PrintStream out) {
    this.out = Objects.requireNonNull(out);
    return this;
  }

  private static class Tokenizer {
    final IndentPrinter err;

    final IndentPrinter out;

    final Messages messages;

    Tokenizer(IndentPrinter out, IndentPrinter err, Messages messages) {
      this.err = err;
      this.out = out;
      this.messages = messages;
    }

    ParseResult parse(String[] args) {
      if (args.length >= 1 && "--help".equals(args[0])) {
        printUsage();
        err.flush();
        out.flush();
        return new HelpPrinted();
      }
      try {
        return new ParsingSuccess(parse(Arrays.asList(args).iterator()));
      }
      catch (RuntimeException e) {
        e.printStackTrace(err.out);
        err.println("Usage:");
        err.incrementIndent();
        err.println(synopsis());
        err.decrementIndent();
        err.println();
        err.println("Error:");
        err.incrementIndent();
        err.println(e.getMessage());
        err.decrementIndent();
        err.println();
        err.println("Try '--help' for more information.");
        err.println();
        return new ParsingFailed(e.getMessage());
      }
      finally {
        err.flush();
        out.flush();
      }
    }

    JbockAutoTypes parse(Iterator<String> tokens) {
      int position = 0;
      ParserState state = new ParserState();
      while (tokens.hasNext()) {
        String token = tokens.next();
        Option option = state.readRegularOption(token);
        if (option != null) {
          state.read(option, token, tokens);
          continue;
        }
        if (!token.isEmpty() && token.charAt(0) == '-') {
          throw new IllegalArgumentException("Invalid option: " + token);
        }
        position += state.readPositional(position, token);
      }
      return state.build();
    }

    void printUsage() {
      out.println("NAME");
      out.incrementIndent();
      String missionStatement = messages.getMessage("jbock.mission", "");
      if (missionStatement.isEmpty()) {
        out.println("JbockAutoTypes");
      }
      else {
        out.println(String.format("%s - %s", "JbockAutoTypes", missionStatement));
      }
      out.println();
      out.decrementIndent();
      out.println("SYNOPSIS");
      out.incrementIndent();
      out.println(synopsis());
      out.println();
      out.decrementIndent();
      out.println("DESCRIPTION");
      out.incrementIndent();
      List<String> descriptionFromJavadoc = new ArrayList<>();
      descriptionFromJavadoc.add("This class contains all the basic parameter types");
      descriptionFromJavadoc.add("that can be used without custom mappers or collectors in jbock 2.9.1.");
      descriptionFromJavadoc.add("Primitives and boxed primitives are omitted here.");
      descriptionFromJavadoc.add("All enums can also be used; they are mapped by their {@code valueOf} method.");
      for (String line : messages.getMessage("jbock.description", descriptionFromJavadoc)) {
        out.println(line);
      }
      out.decrementIndent();
      out.println();
      for (Option option: Option.values()) {
        if (option.positionalIndex.isPresent()) {
          printDescription(option);
          out.println();
        }
      }
      out.println("OPTIONS");
      out.incrementIndent();
      for (Option option: Option.values()) {
        if (!option.positionalIndex.isPresent()) {
          printDescription(option);
          out.println();
        }
      }
      out.decrementIndent();
      List<String> defaultHelp = new ArrayList<>();
      defaultHelp.add("print online help");
      out.incrementIndent();
      out.println("--help");
      out.incrementIndent();
      for (String line : messages.getMessage("jbock.help", defaultHelp)) {
        out.println(line);
      }
      out.println();
      out.decrementIndent();
      out.decrementIndent();
    }

    static String synopsis() {
      StringJoiner joiner = new StringJoiner(" ");
      joiner.add("JbockAutoTypes");
      joiner.add(Option.BIG_DECIMAL.example());
      joiner.add(Option.BIG_INTEGER.example());
      joiner.add(Option.FILE.example());
      joiner.add(Option.LOCAL_DATE.example());
      joiner.add(Option.PATH.example());
      joiner.add(Option.PATTERN.example());
      joiner.add(Option.STRING.example());
      joiner.add(Option.U_RI.example());
      return joiner.toString();
    }

    void printDescription(Option option) {
      if (option.positionalIndex.isPresent()) {
        out.println(option.describe().toUpperCase(Locale.US));
      }
      else {
        out.println(option.describe());
      }
      out.incrementIndent();
      for (String line : messages.getMessage(option.bundleKey, option.description)) {
        out.println(line);
      }
      out.decrementIndent();
    }
  }

  private static class ParserState {
    final Map<String, Option> optionNames = Collections.unmodifiableMap(Option.optionNames());

    final Map<Option, OptionParser> parsers = Collections.unmodifiableMap(Option.parsers());

    final List<PositionalOptionParser> positionalParsers = Collections.unmodifiableList(Option.positionalParsers());

    JbockAutoTypes build() {
      return new JbockAutoTypesImpl(
          parsers.get(Option.BIG_DECIMAL).value().map(BigDecimal::new).orElseThrow(Option.BIG_DECIMAL.missingRequired()),
          parsers.get(Option.BIG_INTEGER).value().map(BigInteger::new).orElseThrow(Option.BIG_INTEGER.missingRequired()),
          parsers.get(Option.FILE).value().map(s -> {
            File f = new File(s);
            if (!f.exists()) {
              throw new IllegalStateException("File does not exist: " + s);
            }
            if (!f.isFile()) {
              throw new IllegalStateException("Not a file: " + s);
            }
            return f;
          }).orElseThrow(Option.FILE.missingRequired()),
          parsers.get(Option.LOCAL_DATE).value().map(LocalDate::parse).orElseThrow(Option.LOCAL_DATE.missingRequired()),
          parsers.get(Option.PATH).value().map(Paths::get).orElseThrow(Option.PATH.missingRequired()),
          parsers.get(Option.PATTERN).value().map(Pattern::compile).orElseThrow(Option.PATTERN.missingRequired()),
          parsers.get(Option.STRING).value().map(Function.identity()).orElseThrow(Option.STRING.missingRequired()),
          parsers.get(Option.U_RI).value().map(URI::create).orElseThrow(Option.U_RI.missingRequired()));
    }

    void read(Option option, String token, Iterator<String> it) {
      parsers.get(option).read(token, it);
    }

    int readPositional(int position, String token) {
      if (position >= positionalParsers.size()) {
        throw new IllegalArgumentException("Invalid option: " + token);
      }
      PositionalOptionParser parser = positionalParsers.get(position);
      parser.read(token);
      return parser.positionIncrement();
    }

    Option readRegularOption(String token) {
      if (token.length() <= 1 || token.charAt(0) != '-') {
        return null;
      }
      if (token.charAt(1) == '-') {
        return readLong(token);
      }
      Option option = optionNames.get(token.substring(0, 2));
      if (option == null) {
        return null;
      }
      if (!option.validShortToken(token)) {
        return null;
      }
      return option;
    }

    Option readLong(String token) {
      int index = token.indexOf('=');
      if (index < 0) {
        return optionNames.get(token);
      }
      else {
        return optionNames.get(token.substring(0, index));
      }
    }
  }

  private static class JbockAutoTypesImpl extends JbockAutoTypes {
    final BigDecimal bigDecimal;

    final BigInteger bigInteger;

    final File file;

    final LocalDate localDate;

    final Path path;

    final Pattern pattern;

    final String string;

    final URI uRi;

    JbockAutoTypesImpl(BigDecimal bigDecimal, BigInteger bigInteger, File file, LocalDate localDate,
        Path path, Pattern pattern, String string, URI uRi) {
      this.bigDecimal = bigDecimal;
      this.bigInteger = bigInteger;
      this.file = file;
      this.localDate = localDate;
      this.path = path;
      this.pattern = pattern;
      this.string = string;
      this.uRi = uRi;
    }

    @Override
    BigDecimal bigDecimal() {
      return bigDecimal;
    }

    @Override
    BigInteger bigInteger() {
      return bigInteger;
    }

    @Override
    File file() {
      return file;
    }

    @Override
    LocalDate localDate() {
      return localDate;
    }

    @Override
    Path path() {
      return path;
    }

    @Override
    Pattern pattern() {
      return pattern;
    }

    @Override
    String string() {
      return string;
    }

    @Override
    URI uRI() {
      return uRi;
    }
  }

  private enum Option {
    BIG_DECIMAL(Collections.singletonList("--BigDecimal"), null, OptionalInt.empty(), "BIG_DECIMAL", Collections.singletonList("Mapped by: java.math.BigDecimal::new")) {
      @Override
      OptionParser parser() {
        return new RegularOptionParser(this);
      }
    },

    BIG_INTEGER(Collections.singletonList("--BigInteger"), null, OptionalInt.empty(), "BIG_INTEGER", Collections.singletonList("Mapped by: java.math.BigInteger::new")) {
      @Override
      OptionParser parser() {
        return new RegularOptionParser(this);
      }
    },

    FILE(Collections.singletonList("--File"), null, OptionalInt.empty(), "FILE", Arrays.asList(
        "Mapped by: <pre>{@code s -> {","java.io.File f = new java.io.File(s);",
        "if (!f.exists()) {",
        "throw new java.lang.IllegalStateException(\"File does not exist: \" + s);","}",
        "if (!f.isFile()) {","throw new java.lang.IllegalStateException(\"Not a file: \" + s);","}",
        "return f;","}}</pre>")) {
      @Override
      OptionParser parser() {
        return new RegularOptionParser(this);
      }
    },

    LOCAL_DATE(Collections.singletonList("--LocalDate"), null, OptionalInt.empty(), "LOCAL_DATE", Collections.singletonList("Mapped by: java.time.LocalDate::parse")) {
      @Override
      OptionParser parser() {
        return new RegularOptionParser(this);
      }
    },

    PATH(Collections.singletonList("--Path"), null, OptionalInt.empty(), "PATH", Collections.singletonList("Mapped by: java.nio.file.Paths::get")) {
      @Override
      OptionParser parser() {
        return new RegularOptionParser(this);
      }
    },

    PATTERN(Collections.singletonList("--Pattern"), null, OptionalInt.empty(), "PATTERN", Collections.singletonList("Mapped by: java.util.regex.Pattern::compile")) {
      @Override
      OptionParser parser() {
        return new RegularOptionParser(this);
      }
    },

    STRING(Collections.singletonList("--String"), null, OptionalInt.empty(), "STRING", Collections.singletonList("Mapped by: java.util.function.Function.identity()")) {
      @Override
      OptionParser parser() {
        return new RegularOptionParser(this);
      }
    },

    U_RI(Collections.singletonList("--URI"), null, OptionalInt.empty(), "U_RI", Collections.singletonList("Mapped by: java.net.URI::create")) {
      @Override
      OptionParser parser() {
        return new RegularOptionParser(this);
      }
    };

    final List<String> names;

    final String bundleKey;

    final OptionalInt positionalIndex;

    final String descriptionArgumentName;

    final List<String> description;

    Option(List<String> names, String bundleKey, OptionalInt positionalIndex,
        String descriptionArgumentName, List<String> description) {
      this.names = names;
      this.bundleKey = bundleKey;
      this.positionalIndex = positionalIndex;
      this.description = description;
      this.descriptionArgumentName = descriptionArgumentName;
    }

    String describeParam(String argname) {
      StringJoiner joiner = new StringJoiner(", ");
      for (String name : names) {
        joiner.add(name + argname);
      }
      return joiner.toString();
    }

    String example() {
      return String.format("%s <%s>", names.get(0), descriptionArgumentName);
    }

    Supplier<IllegalArgumentException> missingRequired() {
      return () -> positionalIndex.isPresent()
        ? new IllegalArgumentException(String.format("Missing parameter: <%s>", this))
        : new IllegalArgumentException(String.format("Missing required option: %s (%s)", this, describeParam("")));
    }

    static Map<String, Option> optionNames() {
      Map<String, Option> result = new HashMap<>(Option.values().length);
      for (Option option : Option.values()) {
        for (String name : option.names) {
          result.put(name, option);
        }
      }
      return result;
    }

    static Map<Option, OptionParser> parsers() {
      Map<Option, OptionParser> parsers = new EnumMap<>(Option.class);
      for (Option option : Option.values()) {
        if (!option.positionalIndex.isPresent()) {
          parsers.put(option, option.parser());
        }
      }
      return parsers;
    }

    Stream<String> values(List<String> positional) {
      if (!positionalIndex.isPresent()) {
        return Stream.empty();
      }
      if (positionalIndex.getAsInt() >= positional.size()) {
        return Stream.empty();
      }
      return positional.subList(positionalIndex.getAsInt(), positional.size()).stream();
    }

    Optional<String> value(List<String> positional) {
      if (!positionalIndex.isPresent()) {
        return Optional.empty();
      }
      if (positionalIndex.getAsInt() >= positional.size()) {
        return Optional.empty();
      }
      return Optional.of(positional.get(positionalIndex.getAsInt()));
    }

    static List<PositionalOptionParser> positionalParsers() {
      List<PositionalOptionParser> parsers = new ArrayList<>();
      for (Option option : Option.values()) {
        if (option.positionalIndex.isPresent()) {
          parsers.add(option.positionalParser());
        }
      }
      return parsers;
    }

    boolean validShortToken(String token) {
      return token.length() >= 2 && token.charAt(0) == '-';
    }

    String describe() {
      return describeParam(String.format(" <%s>", descriptionArgumentName));
    }

    OptionParser parser() {
      throw new AssertionError();
    }

    PositionalOptionParser positionalParser() {
      throw new AssertionError();
    }
  }

  private abstract static class OptionParser {
    final Option option;

    OptionParser(Option option) {
      this.option = option;
    }

    abstract void read(String token, Iterator<String> it);

    Optional<String> value() {
      throw new AssertionError();
    }

    Stream<String> values() {
      throw new AssertionError();
    }

    boolean flag() {
      throw new AssertionError();
    }
  }

  private static class FlagOptionParser extends OptionParser {
    boolean flag;

    FlagOptionParser(Option option) {
      super(option);
    }

    @Override
    void read(String token, Iterator<String> it) {
      if (flag) {
        throw new IllegalArgumentException(String.format("Option %s (%s) is not repeatable", option, option.describeParam("")));
      }
      flag = true;
    }

    @Override
    boolean flag() {
      return flag;
    }
  }

  private static class RegularOptionParser extends OptionParser {
    String value;

    RegularOptionParser(Option option) {
      super(option);
    }

    @Override
    void read(String token, Iterator<String> it) {
      if (value != null) {
        throw new IllegalArgumentException(String.format("Option %s (%s) is not repeatable", option, option.describeParam("")));
      }
      value = readValidArgument(token, it);
    }

    @Override
    Optional<String> value() {
      return Optional.ofNullable(value);
    }
  }

  private static class RepeatableOptionParser extends OptionParser {
    List<String> values = new ArrayList<>();

    RepeatableOptionParser(Option option) {
      super(option);
    }

    @Override
    void read(String token, Iterator<String> it) {
      values.add(readValidArgument(token, it));
    }

    @Override
    Stream<String> values() {
      return values.stream();
    }
  }

  private abstract static class PositionalOptionParser {
    abstract void read(String token);

    abstract int positionIncrement();

    Optional<String> value() {
      throw new AssertionError();
    }

    Stream<String> values() {
      throw new AssertionError();
    }
  }

  private static class RegularPositionalOptionParser extends PositionalOptionParser {
    String value;

    @Override
    void read(String value) {
      this.value = value;
    }

    @Override
    int positionIncrement() {
      return 1;
    }

    @Override
    Optional<String> value() {
      return Optional.ofNullable(value);
    }
  }

  private static class RepeatablePositionalOptionParser extends PositionalOptionParser {
    List<String> values = new ArrayList<>();

    @Override
    void read(String value) {
      values.add(value);
    }

    @Override
    int positionIncrement() {
      return 0;
    }

    @Override
    Stream<String> values() {
      return values.stream();
    }
  }

  private static class IndentPrinter {
    final int baseIndent;

    final PrintWriter out;

    int indentLevel;

    IndentPrinter(PrintStream out, int baseIndent) {
      this.out = new PrintWriter(out);
      this.baseIndent = baseIndent;
    }

    void println() {
      out.println();
    }

    void println(String text) {
      if (Objects.toString(text, "").isEmpty()) {
        out.println();
        return;
      }
      for (int i = 0; i < indentLevel; i++) {
        out.print(' ');
      }
      out.println(text);
    }

    void incrementIndent() {
      indentLevel += baseIndent;
    }

    void decrementIndent() {
      indentLevel -= baseIndent;
    }

    void flush() {
      out.flush();
    }
  }

  private static class Messages {
    final Pattern br = Pattern.compile("\\R");

    final Map<String, String> messages;

    Messages(Map<String, String> messages) {
      this.messages = messages;
    }

    String getMessage(String key, String defaultValue) {
      if (key == null) {
        return defaultValue;
      }
      return messages.getOrDefault(key, defaultValue);
    }

    List<String> getMessage(String key, List<String> defaultValue) {
      if (!messages.containsKey(key)) {
        return defaultValue;
      }
      return Arrays.asList(br.split(messages.get(key), -1));
    }
  }

  abstract static class ParseResult {
    private ParseResult() {
    }
  }

  static final class ParsingFailed extends ParseResult {
    private final String message;

    private ParsingFailed(String message) {
      this.message = Objects.requireNonNull(message);
    }

    String message() {
      return message;
    }
  }

  static final class ParsingSuccess extends ParseResult {
    private final JbockAutoTypes result;

    private ParsingSuccess(JbockAutoTypes result) {
      this.result = Objects.requireNonNull(result);
    }

    JbockAutoTypes result() {
      return result;
    }
  }

  static final class HelpPrinted extends ParseResult {
    private HelpPrinted() {
    }
  }
}

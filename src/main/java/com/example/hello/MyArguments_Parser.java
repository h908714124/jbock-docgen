package com.example.hello;

import java.io.PrintStream;
import java.lang.Character;
import java.lang.IllegalArgumentException;
import java.lang.Integer;
import java.lang.RuntimeException;
import java.lang.String;
import java.lang.StringBuilder;
import java.lang.System;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.AbstractMap;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.EnumMap;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import java.util.OptionalInt;
import java.util.ResourceBundle;
import java.util.StringJoiner;
import java.util.function.Consumer;
import java.util.function.Supplier;
import java.util.stream.Stream;

/**
 * Generated by
 * <a href="https://github.com/h908714124/jbock">jbock 3.4.002</a>
 */
final class MyArguments_Parser {
  private PrintStream out = System.out;

  private PrintStream err = System.err;

  private int maxLineWidth = 80;

  private Consumer<ParseResult> runBeforeExit = r -> {};

  private Map<String, String> messages = Collections.emptyMap();

  private MyArguments_Parser() {
  }

  static MyArguments_Parser create() {
    return new MyArguments_Parser();
  }

  ParseResult parse(String[] args) {
    if (args.length >= 1 && "--help".equals(args[0])) {
      return new HelpRequested();
    }
    try {
      return new ParsingSuccess(parse(Arrays.asList(args).iterator()));
    }
    catch (RuntimeException e) {
      return new ParsingFailed(e);
    }
  }

  MyArguments parseOrExit(String[] args) {
    ParseResult result = parse(args);
    if (result instanceof ParsingSuccess) {
      return ((ParsingSuccess) result).getResult();
    }
    if (result instanceof HelpRequested) {
      HelpRequested helpResult = (HelpRequested) result;
      printOnlineHelp(out);
      out.flush();
      runBeforeExit.accept(result);
      System.exit(0);
    }
    if (result instanceof ParsingFailed) {
      ParsingFailed errorResult = (ParsingFailed) result;
      errorResult.getError().printStackTrace(err);
      err.println("Error: " + errorResult.getError().getMessage());
      printOnlineHelp(err);
      err.println("Try '--help' for more information.");
      err.flush();
      runBeforeExit.accept(result);
      System.exit(1);
    }
    throw new RuntimeException("all cases handled");
  }

  MyArguments parse(Iterator<String> it) {
    int position = 0;
    ParserState state = new ParserState();
    while (it.hasNext()) {
      String token = it.next();
      if ("--".equals(token)) {
        while (it.hasNext()) {
          String t = it.next();
          if (position >= state.paramParsers.size()) {
            throw new IllegalArgumentException("Invalid option: " + t);
          }
          position += state.paramParsers.get(position).read(t);
        }
        return state.build();
      }
      Option option = state.tryReadOption(token);
      if (option != null) {
        state.optionParsers.get(option).read(token, it);
        continue;
      }
      if (!token.isEmpty() && token.charAt(0) == '-') {
        throw new IllegalArgumentException("Invalid option: " + token);
      }
      if (position >= state.paramParsers.size()) {
        throw new IllegalArgumentException("Invalid option: " + token);
      }
      position += state.paramParsers.get(position).read(token);
    }
    return state.build();
  }

  List<Map.Entry<String, String>> buildRows() {
    List<Map.Entry<String, String>> rows = new ArrayList<>();
    for (Option option: Option.values()) {
      String message = messages.getOrDefault(option.bundleKey, String.join(" ", option.description)).trim();
      rows.add(new AbstractMap.SimpleImmutableEntry<String, String>(option.shape, message));
    }
    return rows;
  }

  void printOnlineHelp(PrintStream printStream) {
    printWrap(printStream, 8, "", "Usage: " + synopsis());
    printStream.println();
    for (Map.Entry<String, String> row : buildRows()) {
      String key = String.format("  %1$-27s", row.getKey());
      printWrap(printStream, 29, key, row.getValue());
    }
  }

  void printWrap(PrintStream printStream, int continuationIndent, String init, String input) {
    if (input.isEmpty()) {
      String trim = init.trim();
      printStream.println(init.substring(0, init.indexOf(trim)) + trim);
      return;
    }
    String[] tokens = input.split("\\s+", -1);
    StringBuilder sb = new StringBuilder(init);
    for (String token : tokens) {
      if (token.length() + sb.length() + 1 > maxLineWidth) {
        if (sb.toString().isEmpty()) {
          printStream.println(token);
        }
        else {
          printStream.println(sb);
          sb.setLength(0);
          for (int i = 0; i < continuationIndent; i++) {
            sb.append(' ');
          }
          sb.append(token);
        }
      }
      else {
        if (sb.length() > 0 && !Character.isWhitespace(sb.charAt(sb.length() - 1))) {
          sb.append(' ');
        }
        sb.append(token);
      }
    }
    if (sb.length() > 0) {
      printStream.println(sb);
    }
  }

  MyArguments_Parser withErrorStream(PrintStream err) {
    this.err = Objects.requireNonNull(err);
    return this;
  }

  MyArguments_Parser maxLineWidth(int chars) {
    this.maxLineWidth = chars;
    return this;
  }

  MyArguments_Parser withMessages(Map<String, String> map) {
    this.messages = Objects.requireNonNull(map);
    return this;
  }

  MyArguments_Parser withResourceBundle(ResourceBundle bundle) {
    Map<String, String> map = new HashMap<>();
    for (String name : Collections.list(bundle.getKeys())) {
      map.put(name, bundle.getString(name));
    }
    return withMessages(map);
  }

  MyArguments_Parser runBeforeExit(Consumer<ParseResult> runBeforeExit) {
    this.runBeforeExit = runBeforeExit;
    return this;
  }

  private static String readOptionArgument(String token, Iterator<String> it) {
    boolean isLong = token.charAt(1) == '-';
    int index = token.indexOf('=');
    if (isLong && index >= 0) {
      return token.substring(index + 1);
    }
    if (!isLong && token.length() >= 3) {
      return token.substring(2);
    }
    if (!it.hasNext()) {
      throw new IllegalArgumentException("Missing value after token: " + token);
    }
    return it.next();
  }

  String synopsis() {
    return new StringJoiner(" ").add("my-arguments").add("[options...]").add("<path>").toString();
  }

  MyArguments_Parser withOutputStream(PrintStream out) {
    this.out = Objects.requireNonNull(out);
    return this;
  }

  private static class ParserState {
    final Map<String, Option> optionNames = Collections.unmodifiableMap(Option.optionNames());

    final Map<Option, OptionParser> optionParsers = Collections.unmodifiableMap(Option.optionParsers());

    final List<ParamParser> paramParsers = Collections.unmodifiableList(Option.paramParsers());

    MyArguments build() {
      return new MyArgumentsImpl(
          paramParsers.get(0).values().map(Paths::get).findAny().orElseThrow(Option.PATH.missingRequired()),
          optionParsers.get(Option.VERBOSITY).values().map(Integer::valueOf).findAny());
    }

    Option tryReadOption(String token) {
      if (token.length() <= 1 || token.charAt(0) != '-') {
        return null;
      }
      if (token.charAt(1) == '-') {
        int index = token.indexOf('=');
        return optionNames.get(token.substring(0, index < 0 ? token.length() : index));
      }
      return optionNames.get(token.substring(0, 2));
    }
  }

  private static class MyArgumentsImpl extends MyArguments {
    final Path path;

    final OptionalInt verbosity;

    MyArgumentsImpl(Path path, Optional<Integer> verbosity) {
      this.path = path;
      this.verbosity = verbosity.isPresent() ? OptionalInt.of(verbosity.get()) : OptionalInt.empty();
    }

    Path path() {
      return path;
    }

    OptionalInt verbosity() {
      return verbosity;
    }
  }

  private enum Option {
    PATH(Collections.emptyList(), null, Collections.emptyList(), "path"),

    VERBOSITY(Arrays.asList("-v",
        "--verbosity"), "verbosity", Collections.emptyList(), "-v, --verbosity VERBOSITY");

    final List<String> names;

    final String bundleKey;

    final List<String> description;

    final String shape;

    Option(List<String> names, String bundleKey, List<String> description, String shape) {
      this.names = names;
      this.bundleKey = bundleKey;
      this.description = description;
      this.shape = shape;
    }

    Supplier<IllegalArgumentException> missingRequired() {
      return () -> new IllegalArgumentException("Missing required: " + (names.isEmpty() ? name() :
          String.format("%s (%s)", name(), String.join(", ", names))));
    }

    static Map<String, Option> optionNames() {
      Map<String, Option> result = new HashMap<>(Option.values().length);
      for (Option option : Option.values()) {
        for (String name : option.names) {
          result.put(name, option);
        }
      }
      return result;
    }

    static Map<Option, OptionParser> optionParsers() {
      Map<Option, OptionParser> parsers = new EnumMap<>(Option.class);
      parsers.put(VERBOSITY, new RegularOptionParser(VERBOSITY));
      return parsers;
    }

    static List<ParamParser> paramParsers() {
      List<ParamParser> parsers = new ArrayList<>();
      parsers.add(new RegularParamParser());
      return parsers;
    }
  }

  private static class OptionParser {
    Option option;

    List<String> values = new ArrayList<>();

    OptionParser(Option option) {
      this.option = option;
    }

    void read(String token, Iterator<String> it) {
      values.add(readOptionArgument(token, it));
    }

    Stream<String> values() {
      return values.stream();
    }
  }

  private static class FlagParser extends OptionParser {
    FlagParser(Option option) {
      super(option);
    }

    void read(String token, Iterator<String> it) {
      if (token.charAt(1) != '-' && token.length() > 2 || token.contains("=")) {
        throw new IllegalArgumentException("Invalid token: " + token);
      }
      if (!values.isEmpty()) {
        throw new IllegalArgumentException(String.format("Option %s (%s) is not repeatable", option,
            String.join(", ", option.names)));
      }
      values.add("");
    }
  }

  private static class RegularOptionParser extends OptionParser {
    RegularOptionParser(Option option) {
      super(option);
    }

    void read(String token, Iterator<String> it) {
      if (!values.isEmpty()) {
        throw new IllegalArgumentException(String.format("Option %s (%s) is not repeatable", option,
            String.join(", ", option.names)));
      }
      super.read(token, it);
    }
  }

  private static class ParamParser {
    List<String> values = new ArrayList<>();

    int read(String value) {
      values.add(value);
      return 0;
    }

    Stream<String> values() {
      return values.stream();
    }
  }

  private static class RegularParamParser extends ParamParser {
    int read(String value) {
      values.add(value);
      return 1;
    }
  }

  abstract static class ParseResult {
    private ParseResult() {
    }
  }

  static final class ParsingFailed extends ParseResult {
    private final RuntimeException error;

    ParsingFailed(RuntimeException error) {
      this.error = error;
    }

    RuntimeException getError() {
      return error;
    }
  }

  static final class ParsingSuccess extends ParseResult {
    private final MyArguments result;

    ParsingSuccess(MyArguments result) {
      this.result = result;
    }

    MyArguments getResult() {
      return result;
    }
  }

  static final class HelpRequested extends ParseResult {
  }
}
